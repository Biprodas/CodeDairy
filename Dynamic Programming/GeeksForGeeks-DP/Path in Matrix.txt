// C++ code for Maximum Cost Path in a Matrix
#include<bits/stdc++.h>
using namespace std;
int grid[25][25];
int dp[25][25];
int t, n, mx;

int max(int a, int b, int c){
    int m = a;
    if (m < b) m = b;
    if (m < c) m = c;
    return m;
}

int maxCostPath(int i, int j){
    if(i<0 || j<0 || j>=n) return 0;
    if(dp[i][j]!=-1) return dp[i][j];
    
    return dp[i][j]= grid[i][j] + max(maxCostPath(i-1, j),
                                      maxCostPath(i-1, j-1),
                                      maxCostPath(i-1, j+1)
                                     );
}
   
int main(){
    cin>>t;
    while(t--){
        cin>>n;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
                cin>>grid[i][j];
        }
        memset(dp,-1,sizeof(dp));     
        mx=0;
        for(int i=0;i<n;i++){
            mx= max(mx, maxCostPath(n-1, i));
        }
        cout<<mx<<endl;
    }
    return 0;
}  

// http://practice.geeksforgeeks.org/problems/path-in-matrix/0