// A recursive DP program to find minimum number operations to convert str1 to str2
#include<bits/stdc++.h>
using namespace std;

int dp[1003][1003];
string str1, str2;
 
int min(int x, int y, int z){
   return min(min(x, y), z);
}
 
int editDist(int m ,int n) {
    if(dp[m][n]!=-1) return dp[m][n];
    if (m == 0) return n;	// If first string is empty, insert all characters
    if (n == 0) return m;	// If second string is empty, Remove all characters
 
    if (str1[m-1] == str2[n-1])		// If last characters are matching,
        return editDist(m-1, n-1);	// make a recursive call with last character removed.
 
    // else try all 3 operations and choose the minimum among them
    return dp[m][n]= 1 + min(editDist(m, n-1),	// Insert
                             editDist(m-1, n),	// Remove
                             editDist(m-1, n-1)	// Replace
                            );
}
 
int main(){
    while(cin>>str1>>str2){
        memset(dp,-1,sizeof(dp));
        cout<<editDist(str1.length(), str2.length())<<endl;
    }
    return 0;
}