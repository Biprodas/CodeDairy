//Topological Sorting using bfs and indegree

vector<int> G[MX], T;
//queue<int> q; //if ask for any order sorting
priority_queue<int,vector<int>,greater<int> > pq; //for lexicographically sorting
bool vis[MX];
int inDegree[MX];

void inDeg(int N){
    memset(inDegree,0,sizeof(inDegree));
     for(int i=1;i<=N;i++){
        for(int j=0;j<G[i].size();j++)
            inDegree[G[i][j]]++;
     }
     for(int i=1;i<=N;i++){
         if(inDegree[i]==0){
              pq.push(i);
              vis[i]=true;
         }
     }
}
void TopologicalSort(){
    while(!pq.empty()){
        int u= pq.top(); pq.pop();
        T.pb(u);
        for(int i=0;i<G[u].size();i++){
            int v= G[u][i];
            if(!vis[v]){
                inDegree[v]-=1;
                if(inDegree[v]==0){
                    pq.push(v);
                    vis[v]=true;
                }
            }
        }
    }
}
------------------------------------
//Topological Sorting using dfs
void dfs_tps(int u){
    vis[u]= true;
    for(int i=0;i<G[u].size();i++){
        int v= G[u][i];
        if(!vis[v]){
            dfs_tps(v);
        }
    }
    T.push_back(u); //sorted in reverse order
}