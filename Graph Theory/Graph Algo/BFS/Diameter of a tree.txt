//Find the diameter of a tree
#include<bits/stdc++.h>
using namespace std;
#define pb push_back

int n;
int dist[100005];
int vis[100005];
vector<int> v[100005];

int bfs (int s) {
	queue<int> q;
	q.push(s);
	for(int i=0;i<=n;i++){
		vis[i]=0;
		dist[i]=1;
	}
	vis[s]=1;
	while(!q.empty()){
		int x= q.front();
		q.pop();
		for(int i=0;i<v[x].size();i++){
			if(vis[v[x][i]]==0){
				vis[v[x][i]]=1;
				dist[v[x][i]]= dist[x]+1;
				q.push(v[x][i]);
			}
		}
	}
	return int(max_element(dist+1,dist+n+1)-dist);
}
int main() {
	int x, y;
	cin>>n;
		for(int i=1;i<=n-1;i++) {
			cin>>x>>y;
			v[x].pb(y);
			v[y].pb(x);
		}
		int start = bfs(1);
		int end = bfs(start);
		int diameter = dist[end];
		printf("From Node %d to %d\nDiameter: %d",start, end, diameter);
	return 0;
}
/*
Sample Input:
5
1 2
3 2
2 5
4 1
*/
/*
Step 1: select a random node A
Step 2: run bfs/dfs from A and find the farthest node say S
Step 3: run bfs/dfs from S and find the farthest node say D
Step 4: d(S, D) is the diameter of the tree
void bfs(int s){
*/
