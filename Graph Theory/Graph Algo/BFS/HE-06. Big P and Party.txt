#include<bits/stdc++.h>
using namespace std;
#define pb push_back
#define MX 100005
vector<int> g[MX];
int level[MX]; 
int parent[MX];
bool vis[MX];

void bfs(int s){ //source node
    queue<int> q;
    q.push(s);
    level[s]=0;
    vis[s]=true;
    while(!q.empty()){
        int u= q.front();
        q.pop();
        int sz= g[u].size();
        for(int i=0;i<sz;i++){
            int v= g[u][i];
            if(!vis[v]){
                q.push(v);
                level[v]= level[u]+1;
                vis[v]= true;
            }
        }
    }
}

int main(){
    int n, e, u, v;
    cin>>n>>e;
    for(int i=1;i<=e;i++){ //number of edges
        cin>>u>>v;
        g[u].pb(v);
        g[v].pb(u);
     }
     memset(level,-1,sizeof(level));
     bfs(0); //source is 0

     for(int i=1;i<n;i++){
         if(level[i]==-1) cout<<-1<<endl; //disconnected
         else cout<<level[i]<<endl;
     }
        
return 0;
}
//problem-link: https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/algorithm/big-p-and-party-1/