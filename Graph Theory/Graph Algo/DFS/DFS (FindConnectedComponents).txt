//find connected components using DFS:

#include<bits/stdc++.h>
using namespace std;
#define MX 100005 //maximum node
vector<int>adj[MX];
bool vis[MX];

//RECURSIVE approach
void dfs(int s){  //source node
    vis[s]=true;
    for(int i=0;i<adj[s].size();i++){
        if(!vis[adj[s][i]])
           dfs(adj[s][i]);
    }
}
/* int dfs(int u){
	if(vis[u]) return 0;
	vis[u] = 1;
	int connected = 1;
	for(int i=0;i<G[u].size();i++){
		connected += dfs(G[u][i]);
	}
	return connected;
} */

int main(){
    int N,E, n1,n2;
    cin>>N>>E;
    for(int i=1;i<=E;i++){ //number of edges
        cin>>n1>>n2;
        adj[n1].push_back(n2);
        adj[n2].push_back(n1); //since, graph is undirected.
     }
     int component=0;
     for(int i=1;i<=N;i++){
        if(!vis[i]){
            dfs(i);
            component++;
        }
     }
     cout<<component;
return 0;
}
