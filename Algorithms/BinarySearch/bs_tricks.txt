#define ALL(v) v.begin(),v.end()
#define UB(v,k) upper_bound(ALL(v),k)-v.begin()
#define LB(v,k) lower_bound(ALL(v),k)-v.begin()

vector<int> V = {1, 3, 4, 7, 7, 10, 13, 15, 19, 19, 20};

*if E is not in V, then UB(E)==LB(E)
*if there is one unique E in V, UB(E)==LB(E)+1
*if there are n same E in V, then, UB(E)==LB(E)+n

*** Implementation ***
-------------------------------------------------------
# Find the left-most ans for given condition:
int bs(){
    int lo = 0, hi = 1e9;
    while(lo < hi) {
        int mid = (lo+hi)/2;	//mid=floor(lo+hi)/2
        if(ok(mid)) hi = mid;	//ok(mid)=true, if ans is in left half
        else lo = mid + 1;
    }
    return hi;
}
--------------------------------------------------------
# Find the right-most ans for given condition:
int bs(){
    int lo = 0, hi = 1e9;
    while(lo < hi) {
        int mid = (lo+hi+1)/2; //mid=ceil(lo+hi)/2
        if(ok(mid)) hi = mid-1; //ok(mid)=true, if ans is in left half
        else lo = mid;
    }
    return lo;
}
// after the loop, lo = hi 
---------------------------------------------------------
bool bs(int Ar[], int n, int k) {
    int p = 0;
    for (int a = n; a >= 1; a /= 2) {
        while (p+a < n && Ar[p+a] <= k) p += a;
    }
    return Ar[p] == k;
}
---------------------------------------------------------
# counts how many times the key appears in the array:
int count_key(int Ar[], int n, int k) {
    int p = -1, q = -1;
    for (int a = n; a >= 1; a /= 2) {
        while (p+a < n && Ar[p+a] < k) p += a;
        while (q+a < n && Ar[q+a] <= k) q += a;
    }
    return q-p;
}
---------------------------------------------------------
