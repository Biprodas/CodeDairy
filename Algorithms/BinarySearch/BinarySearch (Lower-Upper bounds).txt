//lower_bound(arr, arr+n, key);
int binaryLeft(int* arr, int key){
    int lo=0, hi=n-1;
    int idx=lo;
    while(lo<=hi){
        int mid= lo+(hi-lo)/2;
        if(key <= arr[mid]){
            idx= mid;	//One occurance of the value is found, save the index
            hi= mid-1;	//Continue searching the left portion after one occurrence is found
        }
        else lo= mid+1;	//if(key>arr[mid])
    }
    return idx; 
}

//upper_bound(arr, arr+n, key);
int binaryRight(int* arr, int key){
    int lo=0, hi=n-1;
    int index= n;
    while(lo<=hi){
        int mid= lo+(hi-lo)/2;
        if(key<arr[mid]){
            index= mid;
            hi= mid-1;
        }
        else //if(key>=arr[mid])
         	lo=mid+1;
    }
    return index-1;
}
